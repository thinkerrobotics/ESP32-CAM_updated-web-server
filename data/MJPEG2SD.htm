
<!doctype html>  
<!-- 
  s60sc 2022, 2023
  with ideas from @marekful
-->                           
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>ESP32-CAM_MJPEGSD</title>
    <link rel="icon" href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="80" font-size="80">ðŸ“·</text></svg>'>
    
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: crimson;
        --buttonActive: ForestGreen;
        --buttonHover: green;
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: gray;
        --menuBackground: #404040; /* dark gray */
        --inputText: navy;
        --pageText: WhiteSmoke; 
        --inputBackground: WhiteSmoke; 
        --alertMsg: orange;
        --itemBorder: silver; 
        --pageBackground:#181818; /* nearly black */
        
        /* logcolors */
        --warnColor: orange;
        --errColor: red;
        --chkColor: green;
        --dbgColor: blue;
        
        /* element sizes */
        --bodySize:1rem; /* used as basis for element, padding, and font sizes */
        --buttonSize: var(--bodySize);
        --buttonHalf: calc(var(--buttonSize) / 2);
        --buttonQuart: calc(var(--buttonSize) / 4);
        --buttonDbl: calc(var(--buttonSize) * 2);
        --inputSize: calc(var(--bodySize) * 0.9);
        --headingSize: calc(var(--bodySize) * 1.25);
        --subheadingSize: var(--bodySize);
        --footerSize: calc(var(--bodySize) * 0.7);
      }
      
      body {
        font-family: Helvetica  !important;
        background: var(--pageBackground);
        color: var(--pageText);
        font-size: var(--bodySize); 
      }

      .hidden {
        display: none
      }
      
      progress {
        width: calc(var(--buttonSize) * 15);
      }
      
      .alertMsg {
        left:10%;
        bottom: var(--buttonDbl);
        position:absolute;
        display:block;
        color:var(--alertMsg);
        z-index:20;
        height: var(--buttonDbl);
      }

      .header {
        font-size: var(--headingSize);
        padding-left: var(--buttonHalf);
        font-weight:bold; 
      }
      
      .subheader {
        font-style: italic;
        font-size: var(--subheadingSize);
        padding-left: var(--buttonQuart);
      }
      
      .tab {
        display: flex;
        overflow: hidden;
        background: var(--menuBackground);
      }

      .tab button {
        background: var(--buttonReady);        
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: var(--buttonHalf);
        transition: 0.3s;
        font-size: calc(var(--buttonSize) * 1.1);
      }
      
      .tab button.active {
        box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
        background: var(--buttonActive);
      }
      
      .tab button.hover {
        background: var(--buttonHover);
      }
      
      .tab button.disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .tabcontent {
        display: none;
      }

      .grid-cols3 {
        grid-template-columns: calc(var(--buttonSize) * 14) calc(var(--buttonSize) * 12) calc(var(--buttonSize) * 12);
      }

      .grid-cols4 {
        grid-template-columns: calc(var(--buttonSize) * 10) calc(var(--buttonSize) * 10) calc(var(--buttonSize) * 10) calc(var(--buttonSize) * 10)
      }

      .grid-cols3, .grid-cols4 {
        display: grid;
        background: none;
        text-align: center;
        font-size: var(--inputSize);
        fill: var(--buttonLabel);
        border: 0px solid var(--itemBorder);
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      .cfgTitle {
        grid-column: 1/5;
        text-align: left;
      }
      
      svg {
        width: calc(var(--buttonSize) * 8);
        height: var(--buttonDbl);
      }
      
      rect {
        fill: var(--buttonReady);
        width: 100%;
        height: 100%; 
        x: 0;
        y: 0;
        ry: 15%;
      }
      
      rect:active {
        fill: var(--buttonActive);
      }
      
      rect:hover{
        fill: var(--buttonHover);
      }
    
      text {
        font-size: var(--buttonSize); 
        fill: var(--buttonText);
        transform: translate(50%,50%);
        pointer-events: none;
      } 
     
      .navtop{
        list-style: none;
        border: 1px solid var(--itemBorder);
        border-radius: var(--buttonQuart);
        padding: var(--buttonQuart);
        margin-top: var(--buttonHalf);
      }
      .navtop li {
       float: left;
       position: relative;
      }

      nav.menu {
        display: grid;
        flex-direction: column;
        flex-wrap: nowrap;
        min-width: calc(var(--buttonSize) * 20);
        background: var(--menuBackground);
        padding: var(--buttonHalf);
        border-radius: 0 var(--buttonQuart) var(--buttonQuart) var(--buttonQuart);
        margin-bottom: var(--buttonQuart);
        border: 1px solid var(--itemBorder);
      }
      nav.menu.buttons {
        min-width: calc(var(--buttonSize) * 25);
      }
      nav.menu.panel {
        display: none;
        min-height: calc(var(--buttonSize) * 20);
      }
      nav.menu.panel.active {
        display: block;
      }
      
      nav.quick-nav {
        width: var(--buttonDbl);
        height: var(--buttonDbl);
        margin: var(--buttonHalf) var(--buttonHalf); var(--buttonHalf) var(--buttonHalf);
        border: 1px solid var(--itemBorder);
        border-radius: var(--buttonQuart);
        cursor: pointer;
        font-size: calc(var(--buttonSize) * 1.5);
        padding: var(--buttonQuart) var(--buttonQuart) var(--buttonQuart) var(--buttonQuart);
        background: var(--buttonReady);
      }

      nav.quick-nav:hover {
        background: var(--buttonHover);
      }

      nav.quick-nav.active {
        box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
        background: var(--buttonActive);
      }
       
      nav#maintoolbar {
        display: flex;
        flex-wrap: nowrap;
        justify-content: flex-end;
        overflow: auto;
      }
      
      .nav-toggle {
        margin: 0 0 var(--buttonQuart) var(--buttonQuart);
        font-size:var(--headingSize);
        display: block;
        margin-bottom: calc(var(--buttonSize) * 3/4);
        padding-bottom: var(--buttonHalf);
        border-bottom: 1px solid var(--itemBorder);
      }
                  
      section#main {
        display: flex;
        flex-direction: column;
      }
      section#header {
        min-width: calc(var(--buttonSize) * 20);
        background: var(--menuBackground);
        margin-bottom: 2px;
        padding: 1px 1px;
        display: flex;
        flex-wrap: wrap;
        border-radius: 2px;
        justify-content: space-between;
      } 
      section#title{
        display: flex;
      }
      section#footer {
        position: fixed;
        bottom: 0;
        width: 97%;
        min-width: calc(var(--buttonSize) * 20);
        background: var(--menuBackground);
        margin-top: 0px;
        padding: var(--buttonQuart) var(--buttonHalf);
        display: flex;
        flex-wrap: wrap;
        border-radius: var(--buttonQuart) var(--buttonQuart) 0 0;
        justify-content: space-between;
        font-size: var(--footerSize);
        z-index: 4;
        border-top: 1px solid var(--itemBorder);
        border-left: 1px solid var(--itemBorder);
        border-right: 1px solid var(--itemBorder);
        border-bottom: none;
        text-align: center; 
      }
      
      section#buttons {
        display: flex;
        flex-wrap: nowrap;
        justify-content: center;
      }

      #foot-spacer {
        height: calc(var(--buttonSize) * 4);
      }
      
      .info-group {
        position: relative;                               
        margin: var(--buttonQuart) 0;
      }
      .info{
        margin-top: 2px;
      }
      .info-group label {
        color: var(--itemInactive);
      }
      
      .menu-action {
        display: none;
      }

      .menu-action + label + div {
        padding: var(--buttonHalf) 0 0 0;
        margin: var(--buttonQuart) 0 0 0;
        border-top: 1px solid var(--itemBorder);
      }

      .menu-action:not(:checked) + label + div { 
        display: none; 
      }

      .sep {
        border: 1px solid var(--itemBorder);
        height: var(--buttonDbl);
        margin: var(--buttonQuart) var(--buttonQuart) 0 var(--buttonQuart);
      }
      .vsep {
        border: 1px solid var(--itemBorder);
        margin: var(--buttonHalf) 2px;
      }

      #menu-top.menu-floating nav.menu.panel {
        border-radius: 0 var(--buttonQuart) var(--buttonQuart) var(--buttonQuart);
      }
      #menu-top.menu-pinned nav.menu.panel {
        border-radius: var(--buttonQuart) var(--buttonQuart) var(--buttonQuart);
        height: 110%;
        left: -1px;
        position: relative;
      }
      #menu-container {
        position: relative;
        min-width: calc(var(--buttonSize) * 4);
        min-height: calc(var(--buttonSize) * 20);
        border-radius: var(--buttonQuart);
        left:var(--buttonQuart);
        top: var(--buttonQuart);
      }
      #menu-container.menu-floating {
        display: table;
      }
      #menu-container.menu-pinned {
        display: flex;
      }
      #menu-top {
        display: inline-grid;
      }
      #menu-top.menu-floating {
        position: absolute;
        left: calc(var(--buttonSize) * 4);
        z-index: 2;
      }
      #menu-top.menu-pinned {
        position: initial;
        left: initial;
        float: left;
        z-index: 4;
        border-left: none;
      }
      #menu-selector {
        z-index: 4;
        background: var(--menuBackground);
        width: calc(var(--buttonSize) * 4);
      }
      #menu-selector.menu-floating {
        position: absolute;
      }
      #menu-selector.menu-pinned {
        position: relative;
        float: left;
        height: 100%;
        border-right: none;
        z-index: 5;
      }
      .menu-floating.menu-open {
        border-radius: var(--buttonQuart) 0 0 var(--buttonQuart);
        border: 1px solid var(--itemBorder);
        border-right: none;
      }
      .menu-floating.menu-closed {
        border-radius: var(--buttonQuart);
        border: 1px solid var(--itemBorder);
      }
      .menu-pinned.menu-open {
        border-radius: var(--buttonQuart) 0 0 var(--buttonQuart);
        border: 1px solid var(--itemBorder);
      }
      .menu-pinnded.menu-closed {
        border-radius: var(--buttonQuart);
        border: 1px solid var(--itemBorder);
      }
      .pin-menu {
        width: calc(var(--buttonSize) * 3/2);
        height: calc(var(--buttonSize) * 3/2);
        float: right;
        cursor: pointer;
      }

      button {
        display: block;
        margin: var(--buttonQuart);
        padding: var(--buttonQuart);
        border: 0;
        line-height: var(--headingSize);
        cursor: pointer;
        color: var(--buttonText);
        background: var(--buttonReady);
        border-radius: var(--buttonQuart);
        font-size: var(--buttonSize);
        outline: 0
      }

      button:active {
       box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
       background: var(--buttonActive);
      }

      button:hover {
        background: var(--buttonHover);
      }

      button:disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .input-group {
        position: relative;
        display: flex;
        flex-wrap: nowrap;
        line-height: var(--buttonDbl);
        margin-top: var(--buttonHalf);
      }
      
      .input-group>label {
        display: inline-block;
        padding-right: var(--buttonHalf);
        min-width: 40%;
      }
      
      .input-group>input {
        width: 100%;
      }

      .input-group input,.input-group select {
        flex-grow: 1
      }
      
      .input-group>input[type=range]  {
        min-width: calc(var(--buttonSize) * 7);  
      }
      
      input, #applog, #sdlog {
        font: var(--inputSize) 'Courier New';
        font-weight:bold;
        color: var(--inputText);
        background: var(--inputBackground);
        min-width: calc(var(--buttonSize) * 10);     
      }
      
      input[type="radio"], input[type="checkbox"], progress {
        accent-color: var(--buttonActive);
      }

      input {
        height: calc(var(--inputSize) * 1.5);
        margin: 0 0 var(--buttonHalf) 0;
        border-radius: var(--buttonQuart);
      }
      
      /*** range slider ***/

      input[type=range] {
        -webkit-appearance: none;
        font-size: var(--buttonSize);
        width: 100%;
        height: var(--buttonHalf);
        background: var(--menuBackground);
        cursor: pointer;
        margin-top: calc(var(--buttonSize) * 3/4);
      }

      input[type=range]:focus {
        outline: 0
      }
      
      input[type=range]::-webkit-slider-runnable-track {
        width: 100%;
        height: 2px;
        cursor: pointer;
        background: var(--inputBackground); 
        border-radius: var(--buttonHalf);
      }

      input[type=range]::-webkit-slider-thumb {
        height: var(--buttonSize);
        width: var(--buttonSize);
        border-radius: 50%;
        background: var(--buttonReady); 
        cursor: pointer;
        -webkit-appearance: none;
        margin-top: calc(-1 * var(--buttonHalf));
      }

       input[type=range]:focus::-webkit-slider-runnable-track {
        background: var(--inputBackground);
      }
  
      div[name="rangeVal"] {
        width: var(--buttonDbl);
        height: var(--buttonSize);
        line-height: 150%;
        text-align: center;
        background: var(--buttonReady); 
        color: var(--buttonText); 
        font-size: var(--footerSize);
        display: block;
        position: absolute;
        left: 50%;
        transform: translate(-50%, 0);
        border-radius: 25%;
        top: -25%; 
      }

       div[name="rangeMin"], div[name="rangeMax"] {
        display: inline-block;
        padding: 0 var(--buttonQuart);
      }
                                 
 
      /* checkbox toggle switch slider */
            
      .switch {
        position: relative;
        display: inline-block;
        width: calc(var(--buttonSize) * 2);
        height: var(--buttonSize);
        top: var(--buttonHalf);
      }

      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .slider {
        position: absolute;
        border-radius: var(--buttonSize);
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--itemInactive);
        width: calc(var(--buttonSize) * 3);                      
        transition: .4s;
      }

      .slider:before {
        position: absolute;
        border-radius: 50%;
        content: "";
        height: var(--buttonSize);
        width: var(--buttonSize);
        left: var(--buttonQuart);
        background: var(--inputBackground);
        transition: .4s;
      }

      input:checked + .slider {
        background-color: var(--buttonActive);
      }

      input:checked + .slider:before {
        transform: translateX(calc(var(--buttonSize)*1.5));
      }
      
      #applog, #sdlog {
        height:50vh;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
        background: var(--inputBackground);
      }
      
      select {
        border: 1px solid var(--menuBackground);
        font-size: var(--inputSize);
        outline: 0;
        border-radius: var(--buttonQuart);
        margin-top: 2px;
      }
      
      .selectField {
         height: calc(var(--inputSize) * 1.5);
      }
      
      table {
        border-collapse:collapse; 
        table-layout:fixed;
        background: var(--menuBackground);
        text-align: left;
      }
      
      th {
        font-weight:bold; 
      }
      
      .config-group th, .config-group td {
        border: 0;
        padding: var(--buttonHalf) var(--buttonHalf) 0 var(--buttonHalf); 
        padding-left: var(--buttonSize);
        line-height: var(--buttonDbl);
        font-size: var(--buttonSize);
      }
      
      .configGroup td input[type="number"] {
        font-size: var(--buttonSize);
      }
      
      input.configItem[type="radio"] {
        min-width: var(--buttonSize); 
      }
      
      input.configItem[type="number"] {
        min-width: calc(var(--buttonSize) * 3); 
        width: calc(var(--buttonSize) * 3); 
      }
      
      .blinking {
        animation: blinker 1.5s linear infinite;
      }

      @keyframes blinker {
        50% {
          opacity: .4;
        }
      }
      
      figure {
        padding: 0px;
        margin: 0; 
        width: 100%;
        height: auto;
        margin-block-start: 0;
        margin-block-end: 0;
        margin-inline-start: 0;
        margin-inline-end: 0;
      }
      
      .image-container {
        position: relative;
      }

      figure img {
        display: block;
        width: 100%;
        height: 100%;
        border-radius: var(--buttonQuart);
      }
      
      #content {
        display: flex;
        flex-wrap: wrap;
        align-items: stretch
      }

      #sidebar{
        margin: 0px;
        padding: 0px;         
        width: 100%;
      } 

      @media (min-width: 50rem) and (orientation:landscape) {
        #content {
          display:flex;
          flex-wrap: nowrap;
          align-items: stretch
        }
        #sidebar {
          width: auto;
        }                                
      }
      
      #stream-container {
        margin: var(--buttonQuart) var(--buttonHalf); calc(var(--buttonSize) * 3) var(--buttonHalf);
        border: 1px solid var(--itemBorder);
      }
      
      .streamSize {
        position: absolute;
        top: var(--buttonQuart);
        background: var(--buttonReady);
        width: var(--buttonSize);
        height: var(--buttonSize);
        border-radius: calc(var(--buttonSize) * 6);
        color: var(--buttonText);
        text-align: center;
        line-height: var(--buttonSize);
        cursor: pointer;
        text-decoration: none;
      }

      #recording-indicator {
        display: inline-block;
        width: calc(var(--buttonSize) * 3/4);
        height: calc(var(--buttonSize) * 3/4);
        padding: var(--buttonQuart);
        margin: var(--buttonHalf);
        background: var(--buttonReady);
        border-radius: var(--buttonSize);
        border: 2px solid var(--itemBorder);
      }

    </style>
  </head>
  
  <body>
    <div class="tab">
      <ul class="navtop">
        <button class="tablinks camTab active" name="mainPage">Camera</button>
        <button class="tablinks" name="ShowLog">Show Log</button>
        <button class="tablinks" name="EditConfig">Edit Config</button>
        <button class="tablinks" name="OTAUpload">OTA Upload</button>
      </ul>
      <section id="main">
        <nav id="maintoolbar">
          <ul class="navtop">
            <li><span id="recording-indicator" style="float: right; display: none;"></span></li>
            <li><button id="forceRecord" style="float:right;">âž¤&nbsp;Start Recording</button></li>   
            <li><div class="sep"></div></li>
            <li><button id="forceStream" class="local" style="float:right;">âž¤&nbsp;Start Stream</button></li>
            <li><button id="get-still" class="local" style="float:right;">Get Still</button></li>
            <li><div class="sep"></div></li>
            <li><button id="forcePlayback" class="local" style="float:right;" disabled="disabled" title="Select a video in 'Playback & File Transfers' to activate playback.">âž¤&nbsp;Start Playback</button></li>
          </ul>
        </nav>
      </section>
    </div>
    
    <div id="mainPage" class="tabcontent" style="display:block">
      <div id="content">
        <div id="sidebar">
          <div id="menu-container" class="menu-pinned">
            <nav id="menu-selector" class="menu-pinned menu-closed">
              <nav class="quick-nav" id="camControl" name="camera-control">ðŸ“·</nav>
              <nav class="quick-nav" id="motionRec" name="motion-record">ðŸ‘€</nav>
              <nav class="quick-nav" id="fileControl" name="playback-transfers">ðŸŽ¥</nav>
              <nav class="quick-nav" id="picSettings" name="picture-settings">ðŸ“º</nav>
              <nav class="quick-nav" id="accSettings" name="access-settings">ðŸ”§</nav>
            </nav>
            <div id="menu-top" class="menu-pinned">
              <nav class="menu panel" id="camera-control">
                <input type="checkbox" id="control-cb" class="menu-action" checked="checked">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="control-cb" class="nav-toggle">ðŸ“·&nbsp;&nbsp;Camera Control&nbsp;&nbsp;</label>
                <div class='addButtons'></div>
                <div>                    
                  <div class="input-group" id="framesize-group">
                    <label for="framesize">Resolution</label>
                    <select id="framesize" class="selectField">
                      <option class="OV5640 hidden" value="21">QSXGA(2560x1920)</option>
                      <option class="OV5640 hidden" value="20">P_FHD(1080x1920)</option>
                      <option class="OV5640 hidden" value="19">WQXGA(2560x1600)</option>
                      <option class="OV5640 hidden" value="18">QHD(2560x1440)</option>
                      <option class="OV3660 OV5640 hidden" value="17">QXGA(2048x1564)</option>
                      <option class="OV3660 hidden" value="16">P_3MP(864x1564)</option>
                      <option class="OV3660 OV5640 hidden" value="15">P_HD(720x1280)</option>
                      <option class="OV3660 OV5640 hidden" value="14">FHD(1920x1080)</option>
                      <option value="13">UXGA(1600x1200)</option>
                      <option value="12">SXGA(1280x1024)</option>
                      <option value="11">HD(1280x720)</option>
                      <option value="10">XGA(1024x768)</option>
                      <option value="9" selected="selected">SVGA(800x600)</option> 
                      <option value="8">VGA(640x480)</option> 
                      <option value="7">HVGA(480x320)</option>
                      <option value="6">CIF(400x296)</option> 
                      <option value="5">QVGA(320x240)</option>
                      <option value="4">240x240</option> 
                      <option value="3">HQVGA(240x176)</option> 
                      <option value="2">QCIF(176x144)</option> 
                      <option value="1">QQVGA(160x120)</option> 
                      <option value="0">96x96</option>
                      </div>
                    </select>
                  </div>
                  <div class="input-group" id="fps-group">
                      <label for="fps">FPS</label>
                      <input title="Set camera required frames per second" type="range" id="fps" min="1" max="30" value="10">
                  </div>
                  <div class="input-group" id="quality-group">
                      <label for="quality">Quality</label>
                      <input title="Set the recording quality" type="range" id="quality" min="4" max="63" value="10">
                  </div>                          
                  <div class="input-group" id="micGain-group">
                    <label for="micGain">Microphone Gain</label>
                    <input title="Set microphone gain" type="range" id="micGain" min="0" max="10" value="0">
                  </div>
                  <div class="input-group" id="CamTilt-group">
                    <label for="camTilt">Camera Tilt</label>
                    <input title="Set camera tilt angle" type="range" id="camTilt" min="0" max="180" value="90">
                  </div>
                  <div class="input-group" id="CamPan-group">
                    <label for="camPan">Camera Pan</label>
                    <input title="Set camera pan angle" type="range" id="camPan" min="0" max="180" value="90">
                  </div>
                  <div class="input-group" id="lamp-group">
                    <label for="lamp">Lamp</label>
                     <input title="Control onboard lamp led brightness" type="range" id="lampLevel" min="0" max="15" value="0">
                  </div>
                </div>
              </nav>
              <nav class="menu panel" id="picture-settings">                                                   
                <input type="checkbox" id="settings-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="settings-cb" class="nav-toggle">ðŸ“º&nbsp;&nbsp;Picture Settings&nbsp;&nbsp;</label>
                <div class='addButtons'></div>
                <div>
                  <div class="input-group" id="xclk-group">
                      <label for="set-xclk">Clock MHz</label>
                      <div class="text">
                          <input id="xclkMhz" title="Set camera clock speed in MHz" type="number" minlength="1" maxlength="2" size="2" value="20">
                      </div>
                  </div>
                  <div class="input-group" id="brightness-group">
                    <label for="brightness">Brightness</label>
                    <input type="range" id="brightness" min="-2" max="2" value="0">
                  </div>
                  <div class="input-group" id="contrast-group">
                    <label for="contrast">Contrast</label>
                    <input type="range" id="contrast" min="-2" max="2" value="0">
                  </div>
                  <div class="input-group" id="saturation-group">
                    <label for="saturation">Saturation</label>
                    <input type="range" id="saturation" min="-2" max="2" value="0">
                  </div>
                  <div class="OV3660 OV5640 hidden">
                    <div class="input-group" id="sharpness-group">
                      <label for="sharpness">Sharpness</label>
                      <input type="range" id="sharpness" min="-3" max="3" value="0">
                    </div>
                    <div class="input-group" id="denoise-group">
                      <label for="denoise">De-Noise</label>
                      <div name="rangeMin">Auto</div>
                      <input type="range" id="denoise" min="0" max="8" value="0">
                    </div>
                  </div>
                  <div class="input-group" id="special_effect-group">
                    <label for="special_effect">Special Effect</label>
                    <select id="special_effect" class="selectField">
                      <option value="0" selected="selected">No Effect</option>
                      <option value="1">Negative</option>
                      <option value="2">Grayscale</option>
                      <option value="3">Red Tint</option>
                      <option value="4">Green Tint</option>
                      <option value="5">Blue Tint</option>
                      <option value="6">Sepia</option>
                    </select>
                  </div>
                  <div class="input-group" id="awb-group">
                      <label for="awb">AWB Enable</label>
                      <div class="switch">
                          <input id="awb" type="checkbox" checked="checked">
                          <label class="slider" for="awb"></label>
                      </div>
                  </div>
                  <div class="input-group" id="awb_gain-group">
                    <label for="awb_gain" id="awbg_lab">AWB Gain</label>
                    <div class="switch">
                      <input id="awb_gain" type="checkbox" checked="checked">
                      <label class="slider" for="awb_gain"></label>
                    </div>
                  </div>
                  <div class="input-group" id="wb_mode-group">
                    <label for="wb_mode">AWB Mode</label>
                    <select id="wb_mode" class="selectField">
                      <option value="0" selected="selected">Auto</option>
                      <option value="1">Sunny</option>
                      <option value="2">Cloudy</option>
                      <option value="3">Office</option>
                      <option value="4">Home</option>
                    </select>
                  </div>
                  <div class="input-group" id="aec-group">
                    <label for="aec">AEC Enable</label>
                    <div class="switch">
                      <input id="aec" type="checkbox" checked="checked">
                      <label class="slider" for="aec"></label>
                    </div>
                  </div>
                  <div class="input-group" id="aec_value-group">
                    <label for="aec_value">Manual Exposure</label>
                    <input type="range" id="aec_value" min="0" max="1200" value="204">
                  </div>
                  <div class="input-group" id="ae_level-group">
                    <label for="ae_level">Exposure Level</label>
                    <input type="range" id="ae_level" min="-2" max="2" value="0">
                  </div>
                  <div class="input-group" id="aec2-group">
                    <label for="aec2" id="aec2_lab">AEC DSP</label>
                    <div class="switch">
                      <input id="aec2" type="checkbox" checked="checked">
                      <label class="slider" for="aec2"></label>
                    </div>
                  </div>
                  <div class="input-group" id="dcw-group">
                    <label for="dcw" id="dcw_lab">DCW (Downsize)</label>
                    <div class="switch">
                      <input id="dcw" type="checkbox" checked="checked">
                      <label class="slider" for="dcw"></label>
                    </div>  
                  </div>
                  <div class="input-group" id="agc-group">
                    <label for="agc">AGC Enable</label>
                    <div class="switch">
                      <input id="agc" type="checkbox" checked="checked">
                      <label class="slider" for="agc"></label>
                    </div>
                  </div>
                  <div class="input-group hidden" id="agc_gain-group">
                    <label for="agc_gain">Gain</label>
                    <div name="rangeMin">1x</div>
                    <input type="range" id="agc_gain" min="0" max="30" value="5">
                    <div name="rangeMax">31x</div>
                  </div>
                  <div class="input-group" id="gainceiling-group">
                    <label for="gainceiling">Gain Ceiling</label>
                    <div name="rangeMin">2x</div>
                    <input type="range" id="gainceiling" min="0" max="6" value="0">
                    <div name="rangeMax">128x</div>
                  </div>       
                  <div class="input-group" id="lenc-group">
                    <label for="lenc">Lens Correction</label>
                    <div class="switch">
                      <input id="lenc" type="checkbox" checked="checked">
                      <label class="slider" for="lenc"></label>
                    </div>
                  </div>
                  <div class="input-group" id="hmirror-group">
                    <label for="hmirror">H-Mirror</label>
                    <div class="switch">
                      <input id="hmirror" type="checkbox" checked="checked">
                      <label class="slider" for="hmirror"></label>
                    </div>
                  </div>
                  <div class="input-group" id="vflip-group">
                    <label for="vflip">V-Flip</label>
                    <div class="switch">
                      <input id="vflip" type="checkbox" checked="checked">
                      <label class="slider" for="vflip"></label>
                    </div>
                  </div>
                  <div class="input-group" id="colorbar-group">
                    <label for="colorbar">Color Bar</label>
                    <div class="switch">
                      <input id="colorbar" type="checkbox">
                      <label class="slider" for="colorbar"></label>
                    </div>
                  </div>
                  <div class="input-group" id="bpc-group">
                    <label for="bpc">BPC</label>
                    <div class="switch">
                      <input id="bpc" type="checkbox" checked="checked">
                      <label class="slider" for="bpc"></label>
                    </div>
                  </div>
                  <div class="input-group" id="wpc-group">
                    <label for="wpc">WPC</label>
                    <div class="switch">
                      <input id="wpc" type="checkbox" checked="checked">
                      <label class="slider" for="wpc"></label>
                    </div>
                  </div>
                  <div class="input-group" id="raw_gma-group">
                    <label for="raw_gma">GMA Enable</label>
                    <div class="switch">
                      <input id="raw_gma" type="checkbox" checked="checked">
                      <label class="slider" for="raw_gma"></label>
                    </div>
                  </div>                  
                </div>            
              </nav>
              <nav class="menu panel" id="motion-record">
                <input type="checkbox" id="motion-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="motion-cb" class="nav-toggle">ðŸ‘€&nbsp;&nbsp;Motion Detect & Recording&nbsp;&nbsp;</label>
                <div class='addButtons'></div>
                <div>
                  <div class="input-group" id="motion-group">
                    <label for="enableMotion">Motion detect</label>
                    <div class="switch">
                      <input id="enableMotion" type="checkbox">
                      <label title="Enable/disable motion detection" class="slider" for="enableMotion"></label>
                    </div>
                  </div>
                  <div class="input-group" id="motion-group">
                    <label for="motion">Motion Sensitivity</label>
                    <input title="Set motion detection sensitivity" type="range" id="motionVal" min="1" max="10" value="7">
                  </div> 
                  <div class="input-group" id="minf-group">
                    <label for="minf">Min Seconds</label>
                    <input title="Minimum number of frames to be captured or the file is deleted" type="range" id="minf" min="0" max="20" value="5">
                  </div>                     
                  <div class="input-group" id="record-group">
                      <label for="record">Save Capture</label>
                      <div class="switch">
                        <input id="record" type="checkbox">
                        <label title="Enable recording on motion detection" class="slider" for="record"></label>
                      </div>
                  </div> 
                  <div class="input-group" id="dbgMotion-group">
                    <label for="dbgMotion">Show Motion</label>
                    <div class="switch">
                      <input id="dbgMotion" type="checkbox">
                      <label title="Display detected camera motion" class="slider" for="dbgMotion"></label>
                    </div>
                  </div>
                  <div class="input-group" id="lswitch-group">
                    <label for="lswitch">Night Switch</label>
                    <input title="Set night switch sensitivity" type="range" id="lswitch" min="0" max="100" value="10">
                  </div> 
                  <div class="vsep"></div>
                  <div class="input-group" id="tlapse-group">
                    <label for="timeLapseOn">Time Lapse</label>
                    <div class="switch">
                      <input id="timeLapseOn" type="checkbox">
                      <label title="Enable time lapse recording" class="slider" for="timeLapseOn"></label>
                    </div>
                  </div>                
                </div>
              </nav>
              <nav class="menu panel" id="playback-transfers">
                <input type="checkbox" id="files-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="files-cb" class="nav-toggle">ðŸŽ¥&nbsp;&nbsp;Playback & File Transfers&nbsp;&nbsp;</label>
                <div>
                  <div class="input-group" id="sfiles-group" style="display: grid;">
                    <label for="sfiles">Select folder / file</label>                          
                    <select title="Select sd card file or folder" id="sfile" size="15">
                      <option value="/~reset" selected="selected">-- Select --</option>
                      <option value="/">Get Folders</option>
                      <option value="/~current">List current (today)</option>
                      <option value="/~previous">List previous (yesterday)</option>
                    </select>
                  </div>
                  <div>
                    <progress id="progressBar" value='0' max='100' class="info"></progress>%
                  </div>
                  <br>
                  <section id="buttons">
                    <button class="local" title="Download selected file from sd card" id="download" style="float:right" value="1">Download</button>
                    <button class="local" title="Upload selected file/folder to ftp server" id="upload" style="float:left" value="1">Ftp Upload</button>
                    <button class="local" title="Upload selected file/folder and delete it from sd card on success" id="uploadMove" style="float:left" value="1">Ftp Move</button>
                    <button class="local" title="Delete selected file/folder from sd card" id="delete" style="float:right" value="1">Delete</button>
                  </section>
                  <br>
                  <div class="input-group" id="autoUpload-group">
                    <label for="autoUpload">Auto upload</label>
                    <div class="switch">
                      <input id="autoUpload" type="checkbox">
                      <label title="Automatic ftp upload on file creation" class="slider" for="autoUpload"></label>
                    </div>
                  </div>
                </div>
              </nav>
              <nav class="menu panel" id="access-settings">
                <input type="checkbox" id="other-cb" class="menu-action">
                <div class="pin-menu" title="Pin / unpin menu">ðŸ“Œ</div>
                <label for="other-cb" class="nav-toggle">ðŸ”§&nbsp;&nbsp;Access Settings&nbsp;&nbsp;</label>
                <div class='addButtons'></div>
                <div>
                  <div class="subheader">Network settings</div>
                  <div class="input-group" id="wifi-group">
                    <label for="hostName">Host Name</label>
                    <input id="hostName" name="hostName" length=32 placeholder="Host name">
                  </div>
                  <div class="input-group" id="wifi-group">
                    <label for="ST_SSID">SSID</label>
                    <input id="ST_SSID" name="ST_SSID" length=32 placeholder="Router SSID">
                  </div>
                  <div class="input-group" id="wifi-group">
                    <label for="ST_Pass">Password</label>
                    <input id="ST_Pass" name="ST_Pass" length=64 placeholder="Router password">
                  </div>
                  <br>
                  <div class="subheader">Clock settings</div>
                  <div class="input-group" id="time-group">
                    <label for="timezone">Time zone</label>
                    <input id="timezone" name="timezone" length=64 placeholder="Time zone string">
                  </div>
                  <div class="input-group" id="time-group">
                    <label for="timezoneSel">Time zone select</label>
                    <select id="timezoneSel" name="timezoneSel" class="selectField">
                      <option value="" selected>&nbsp;-- Select --</option>
                      <option value="EET-2EEST-3,M3.5.0/03:00:00,M10.5.0/04:00:00">Europe/Athens</option>
                      <option value="GMT0BST,M3.5.0/1,M10.5.0">Europe/Belfast</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Berlin</option>
                      <option value="GMT0BST,M3.5.0/1,M10.5.0">Europe/London</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Paris</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Rome</option>
                      <option value="CET-1CEST,M3.5.0,M10.5.0/3">Europe/Zurich</option>
                      <option value="<-12>12">GMT-12:00</option>
                      <option value="<-11>11">GMT-11:00</option>
                      <option value="<-10>10">GMT-10:00</option>
                      <option value="<-09>9">GMT-9:00</option>
                      <option value="<-08>8">GMT-8:00</option>
                      <option value="<-07>7">GMT-7:00</option>
                      <option value="<-06>6">GMT-6:00</option>
                      <option value="<-05>5">GMT-5:00</option>
                      <option value="<-04>4">GMT-4:00</option>
                      <option value="<-03>3">GMT-3:00</option>
                      <option value="<-02>2">GMT-2:00</option>
                      <option value="<-01>1">GMT-1:00</option>
                      <option value="GMT0">GMT+0:00</option>
                      <option value="<+01>-1">GMT+1:00</option>
                      <option value="<+02>-2">GMT+2:00</option>
                      <option value="<+03>-3">GMT+3:00</option>
                      <option value="<+04>-4">GMT+4:00</option>
                      <option value="<+05>-5">GMT+5:00</option>
                      <option value="<+06>-6">GMT+6:00</option>
                      <option value="<+07>-7">GMT+7:00</option>
                      <option value="<+08>-8">GMT+8:00</option>
                      <option value="<+09>-9">GMT+9:00</option>
                      <option value="<+10>-10">GMT+10:00</option>
                      <option value="<+11>-11">GMT+11:00</option>
                      <option value="<+12>-12">GMT+12:00</option>                                  
                    </select>
                  </div>
                  <br>                          
                  <div class="subheader">Ftp settings</div>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_server">Ftp Server</label>
                    <input id="ftp_server" name="ftp_server" length=32 placeholder="Ftp server name">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_port">Ftp port</label>
                    <input id="ftp_port" name="ftp_port" length=6 placeholder="Ftp port">
                  </div>                          
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_user">Ftp user name</label>
                    <input id="ftp_user" name="ftp_user" length=32 placeholder="Ftp user name">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="FTP_Pass">Ftp password</label>
                    <input id="FTP_Pass" name="FTP_Pass" length=32 placeholder="Ftp password">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="ftp_wd">Ftp root dir</label>
                    <input id="ftp_wd" name="ftp_wd" length=64 placeholder="Ftp working directory">
                  </div>                          
                  <br>
                  <div class="subheader">SMTP settings</div>
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_server">SMTP server</label>
                    <input id="smtp_server" name="smtp_server" length=32 placeholder="smtp server name">
                  </div>
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_port">SMTP port</label>
                    <input id="smtp_port" name="smtp_port" length=6 placeholder="smtp port">
                  </div>                          
                  <div class="input-group" id="smtp-group">
                    <label for="smtp_login">SMTP login</label>
                    <input id="smtp_login" name="smtp_login" length=32 placeholder="smtp login email">
                  </div>
                  <div class="input-group" id="smtp-group">
                    <label for="SMTP_Pass">SMTP password</label>
                    <input id="SMTP_Pass" name="SMTP_Pass" length=32 placeholder="smtp password">
                  </div>
                  <div class="input-group" id="ftp-group">
                    <label for="smtp_email">SMTP email</label>
                    <input id="smtp_email" name="smtp_email" length=64 placeholder="smtp email to">
                  </div>   
                  <br>
                  <div class="subheader">Authentication settings</div>
                  <div class="input-group" id="auth-group">
                      <label for="Auth_Name">Web login</label>
                      <input id="Auth_Name" name="Auth_Name" length=32 placeholder="Authentication user name">
                  </div>
                  <div class="input-group" id="auth-group">
                      <label for="Auth_Pass">Web password</label>
                      <input id="Auth_Pass" name="Auth_Pass" length=32 placeholder="Authentication password">
                  </div>                      
                </div>
              </nav>
              <div id="foot-spacer"></div>
            </div>
          </div>
        </div>
        <figure>
            <div id="stream-container" class="image-container hidden">
                <div class="streamSize" id="closeStream" title="Close screen">Ã—</div>
                <div class="streamSize" id="actualSize" title="Actual size">-</div>
                <div class="streamSize" id="maxFit" title="Fit to browser">#</div>
                <div class="streamSize" id="fullAspect" title="Full screen with aspect">&curren;</div>
                <div class="streamSize" id="fullSize" title="Full screen">&rect;</div>
                <div class="streamSize" id="saveImage" title="Download screenshot">v</div>
                <img id="stream" src="" crossorigin>
            </div>
        </figure>
        </figure>
      </div>
        <section id="footer">
          <div class="info-group center">
              <label for="fw_version">Version</label>
              <div id="fw_version" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="llevel">Ambient&nbsp;Light</label>
              <div id="llevel" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="night">Night&nbsp;Time</label>
              <div id="night" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="atemp">Camera&nbsp;Temp</label>
              <div id="atemp" class="info displayonly">&nbsp;</div>
          </div> 
          <div class="info-group center">
              <label for="battv">Battery&nbsp;Voltage</label>
              <div id="battv" class="info displayonly">&nbsp;</div>
          </div> 
          <div class="info-group center">
              <label for="clock">&nbsp;Camera&nbsp;local&nbsp;time</label>
              <div id="clock" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="up_time">Up&nbsp;time</label>
              <div id="up_time" class="info displayonly">&nbsp;</div>
          </div>                                                 
          <div class="info-group center">
              <label for="wifi_rssi">Signal&nbsp;Strength</label>
              <div id="wifi_rssi" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="free_heap">Free&nbsp;heap</label>
              <div id="free_heap" class="info displayonly">&nbsp;</div>
          </div>  
          <div class="info-group center">
              <label for="free_psram">Free&nbsp;PSRAM</label>
              <div id="free_psram" class="info displayonly">&nbsp;</div>
          </div>                 
          <div class="info-group center">
              <label for="total_bytes">Total&nbsp;space</label>
              <div id="total_bytes" class="info displayonly">&nbsp;</div>
          </div>                
          <div class="info-group center">
              <label for="used_bytes">Used&nbsp;space</label>
              <div id="used_bytes" class="info displayonly">&nbsp;</div>
          </div>
          <div class="info-group center">
              <label for="free_bytes">Free&nbsp;space</label>
              <div id="free_bytes" class="info displayonly">&nbsp;</div>
          </div>   
        </section>                         
      </section> 
    </div>
    
    <div id="ShowLog" class="tabcontent">
      <br><br>
      <div class="grid-cols3">
        <div class="input-group" style="text-align: left">
          <label for="wsMode" class="header" title="Enable logging to websocket">Log to browser:</label>
          <div class="switch">
              <input class="local" id="wsMode" type="checkbox">
              <label title="Output log to WS" class="slider" for="wsMode"></label>
          </div>   
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local" id="clearWSlog">Clear WS Log</text>
          </svg>
        </div>
        <div class="input-group" id="dbg-group" style="text-align: left">
          <label for="dbgVerbose" class="header" title="Set verbose logging">Verbose:</label>
          <div class="switch">
            <input id="dbgVerbose" type="checkbox">
            <label title="Outputs additional information to log" class="slider" for="dbgVerbose"></label>
          </div>
        </div>
      </div>
      <div id="applog"></div>
      <br><br>
      <div class="grid-cols3">
        <div class="input-group" style="text-align: left">
          <label for="logMode" class="header" title="Enable logging to sd card">Log to SD card:</label>
          <div class="switch">
              <input id="logMode" type="checkbox">
              <label title="Output log to SD" class="slider" for="logMode"></label>
          </div>  
        </div> 
        <div>
          <svg>
            <rect/>
            <text class="local" id="clearSDlog">Clear SD Log</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local" id="refreshSDlog">Retrieve SD Log</text>
          </svg>
        </div>
      </div>
      <div id="sdlog"></div>
    </div>
    <br>
    
    <div id="EditConfig" class="tabcontent">
      <div class="header">Control</div>
      <br>
      <div class="grid-cols4">
        <div>
          <svg>
            <rect/>
            <text id="save" class="midText">Save</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="reset" class="midText">Reboot ESP</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="deldata" class="midText">Reload /data</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="clear" class="midText">Clear NVS</text>
          </svg>
        </div>
        <div class="cfgTitle">
          <br>
          <div class="header">Settings</div>
          <div class="subheader">Press a button to view or modify settings (changed values are not validated)</div>
          <div class="subheader">Press Save button to make changes permanent</div>
          <br>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local midText" id="wifi">Wifi</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local midText" id="motion">Motion</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local midText" id="peripherals">Peripherals</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="local midText" id="other">Other</text>
          </svg>
        </div>
      </div>
      <div>
        <p class='config-group' id='Cfg'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br><br>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input class="local" type="file" name="otafile" id="otafile">
        <br><br>
        <progress id="progressOta" value="0" max="100"></progress>%
        <div class="subheader" id="status"></div>
        <p id="loaded_n_total"></p>
      </form>
    </div>   
        
    <div class="alertMsg">
      <span id="alertText"></span>
    </div>
    
    <script>
      document.addEventListener('DOMContentLoaded', function (event) {
        'use strict'

        /*********** initialisation  ***********/
        
        const webPort = 80;
        const otaPort = 82;
        const streamPort = 81;
        const baseHost = document.location.hostname;
        const webHost = "http://" + baseHost;
        const webServer = webHost + ":" + webPort;
        const wsServer = "ws://" + baseHost + ":" + webPort + "/ws";
        const otaServer = webHost + ":" + otaPort;
        const streamServer = webHost + ':' + streamPort;
        
        let refreshInterval = 5000;
        let ws = null;
        let hbTimer = null;
        let updateData = {}; // receives json for status data as key val pairs
        let statusData = {}; // stores all status data as key val pairs
        let cfgGroupNow = -1;
        let loggingOn = false;
        let prevKey = '';
        const CLASS = 0;
        const ID = 1;
        const $ = document.querySelector.bind(document);
        const $$ = document.querySelectorAll.bind(document);
        const baseFontSize = parseInt(window.getComputedStyle($('body')).fontSize); 
        const root = getComputedStyle($(':root'));
        
        let imgSize = { width: 0, height: 0 };
        let fitSize = { width: 0, height: 0 };
        let cameraModel = "OV2640";
        let firstCall = true;
        
        initialise();
        
        function initialise() {
          try {
            addButtons();
            addRangeData();
            setListeners();
            // initWebSocket();
            loadStatus(""); 
            if (hbTimer == null) setTimeout(refreshStatus, refreshInterval);
          } catch (error) {
            showLog("Error: " + error.message);
            alert("Error: " + error.message);
          }
        }
        
        /*********** websocket functions ***********/
        
        // define websocket handling
        function initWebSocket() {
          loggingOn = true;
          showLog("Connect to: " + wsServer);
          ws = new WebSocket(wsServer);
          ws.onopen = onOpen;
          ws.onclose = onClose;
          ws.onmessage = onMessage; 
          ws.onerror = onError;
        }
          
        // periodically check that connection is still up and get status
        function heartbeat() {
          if (!ws) return;
          if (ws.readyState !== 1) return;
          sendCmd("H");
          clearTimeout(hbTimer);
          hbTimer = setTimeout(heartbeat, refreshInterval);  
        }
        
        // connect to websocket server
        function onOpen(event) {
          showLog("Connected");
          //heartbeat();
        }
        
        // process received WS message
        function onMessage(messageEvent) {
          if (messageEvent.data.startsWith("{")) {
            // json data
            updateData = JSON.parse(messageEvent.data);
            let filter = updateData.cfgGroup;
            delete updateData.cfgGroup;
            if (filter == "-1") updateStatus(); // status update
            else buildTable(updateData, filter); // format received config json into html table
          } else showLog(messageEvent.data, false);
        }
        
        function onError(event) {
          showLog("WS Error: " + event.code);
        }
        
        function onClose(event) {
          showLog("Disconnected: " + event.code + ' - ' + event.reason);
          loggingOn = false;
          ws = null;
          // event.codes:
          //   1006 if server not available, or another web page is already open
          //   1005 if closed from app
          if (event.code == 1006) {} //alert("Closed websocket as a newer connection was made, refresh browser page");
          else if (event.code != 1005) initWebSocket(); // retry if any other reason
        }
        
        async function closeWS() {
          ws.send('K');
          await sleep(500);
          if (ws != null) ws.close();
        }
        
        /*********** page layout functions ***********/
      
        function openTab(e) {
          // control tab viewing
          $$('.tabcontent').forEach(el => {el.style.display = "none";});
          $('#' + e.name).style.display = "inherit";
          $$('.tablinks').forEach(el => {el.classList.remove("active");});
          e.classList.add("active");
          try {
            if (e.name == 'mainPage') show($('#main'));
            else hide($('#main'));
          } catch {}
        }

        function accordian(accId) {
          // accordian buttons to show / hide elements
          let panel = $('#' + accId);
          if (panel.style.display === "inherit") panel.style.display = "none";
          else panel.style.display = "inherit";
        }
       
         function rangeSlider(el, isPos = true, statusVal = null) {
          // update range slider marker position and value 
          const rangeVal = el.parentElement.children.rangeVal;
          if (statusVal != null) el.value = statusVal;
          const currVal = isPos ? parseFloat(el.value) : parseFloat(rangeVal.innerHTML);
          const minval = parseFloat(el.min);
          const maxval = parseFloat(el.max);
          const decPlaces = (el.step > 0 && el.step < 1) || el.step == 'any' ? 1 : 0;
          if (el.classList.contains('logslider')) {
            // range value is logarithmic
            const minlog = Math.log(minval);
            const maxlog = Math.log(maxval) ;
            const scale = (maxlog - minlog) / (maxval - minval);
            // if isPos then get value from slider positional change by user, else set slider position from initial value.
            if (isPos) rangeVal.innerHTML = Math.exp((currVal - minval) * scale + minlog).toFixed(decPlaces);
            else el.value = minval + ((currVal == 0 ? 0 : Math.log(currVal)) - minlog) / scale; 
          } else rangeVal.innerHTML = parseFloat(el.value).toFixed(decPlaces);
          
          // position for range marker
          const rangeFontSize = parseInt(window.getComputedStyle($('input[type=range]')).fontSize); 
          let position = (el.clientWidth - rangeFontSize) * (el.value - minval) / (maxval - minval); 
          position += el.offsetLeft + (rangeFontSize / 2);
          rangeVal.style.left = 'calc('+position+'px)';
        }
        
        let observer = new IntersectionObserver ( function(entries) {
          // recalc each range slider that becomes visible
            entries.forEach(el => { if (el.isIntersecting === true) rangeSlider(el['target']); });
          }, { threshold: [0] }
        );
        $$('input[type=range]').forEach(el => { observer.observe(el); });
        
        function addButtons() {
          // add commmon buttons to relevant sections
          $$('.addButtons').forEach(el => {
            el.innerHTML = '<section id="buttons">'
              +'<button id="save" style="float:right;" value="1">Save Settings</button>'
              +'<button id="reset" style="float:right;" value="1">Reboot ESP</button>'
            +'</section><br>'
          });
        }
        
         function addRangeData() {
          // add labelling for rangle sliders
          $$('input[type="range"]').forEach(el => {
            if (!isDefined(el.parentElement.children.rangeMin)) el.insertAdjacentHTML("beforebegin", '<div name="rangeMin"/>'+el.min+'</div>');
            el.insertAdjacentHTML("afterend", '<div name="rangeVal">'+el.value+'</div>');
            if (!isDefined(el.parentElement.children.rangeMax)) el.insertAdjacentHTML("afterend", '<div name="rangeMax"/>'+el.max+'</div>');
            rangeSlider(el, false);
          });
        } 

        /*********** data processing functions ***********/
        
        async function loadStatus(specifier) {
          // request and load current status from app
          const response = await fetch(webServer+'/status'+specifier);
          if (response.ok) {
            updateData = await response.json();
            updateStatus();
            await sleep(1000);
          } else console.log(response.status); 
        }
        
        function refreshStatus() {
          // refresh status at required interval
          clearTimeout(hbTimer);
          loadStatus("?q");
          hbTimer = setTimeout(refreshStatus, refreshInterval);
        }
        
        function updateStatus() {
          // replace each existing value with new received value, using key name to match html tag id
          Object.entries(updateData).forEach(([key, value]) => {
            let elt = $('text#'+key); // svg button
            let eld = $('div#'+key); // display text
            let eli = $('#'+key); // input field
            if (elt) elt.textContent = value; 
            else if (eld) {if (eld.classList.contains('displayonly')) eld.innerHTML = value;} // display text 
            else if (eli != null) { // input fields
              if (eli.type === 'checkbox') eli.checked = !!Number(value);
              else if (eli.type === 'range') rangeSlider(eli, false, value); 
              else if (eli.type === 'option') eli.selected = true;
              else eli.value = value; 
            }
            statusData[key] = value;
            processStatus(ID, key, value, false);
          });
        }
        
        async function sendUpdates(doAction) {    
          // send bulk updates to app as json 
          statusData['action'] = doAction;
          const response = await fetch(webServer + '/update', {
            method: 'POST', 
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(statusData),
          });
          if (!response.ok) console.log(response.status);
        } 
        
        /*********** utility functions ***********/
        
        function debounce(func, timeout = 500){
          // debounce rapid clicks to prevent unnecessary fetches
          let timer;
          return (...args) => {
            clearTimeout(timer);
            timer = setTimeout(() => { func.apply(this, args); }, timeout);
          };
        }
        
        const debounceSendControl = debounce((key, value) => sendControl(key, value));
        
        function sleep(ms) {
          return new Promise(resolve => setTimeout(resolve, ms));
        }
        
        function hide(el) {
          el.classList.add('hidden')
          el.style.display = "none";
        }
        
        function show(el) {
          el.classList.remove('hidden')
          el.style.display = "";
        }

        function disable(el) {
          el.classList.add('disabled');
          el.disabled = true;
        }

        function enable(el) {
          el.classList.remove('disabled');
          el.disabled = false;
        }
        
        function isActive(key) {
          return key.classList.contains('active') ? true : false;
        }
        
        function isDefined(variable) {
          return (typeof variable === 'undefined' || variable === null ) ? false : true;
        }
        
        async function showAlert(value) {
          $('#alertText').innerHTML = value;
          await sleep(5000);
          $('#alertText').innerHTML = "";
        }
        
        function dbg(msg) {
          console.log('***** '+msg);
        }
        
        /*********** command processing ***********/
        
        function setListeners() {
        
          // click events
         document.addEventListener("click", function (event) {
            const e = event.target;
            // svg rect elements, use id of its following text node
            if (e.nodeName == 'rect') processStatus(ID, e.nextElementSibling.id, 1);
            // tab buttons, use name as target id 
            else if (e.classList.contains('tablinks')) openTab(e);
            // other buttons
            else if (e.tagName == 'BUTTON') processStatus(ID, e.id, e.value);
            // navigation and presentation icons
            else if (e.tagName == 'NAV' || e.tagName == 'DIV') processStatus(CLASS, e.classList.value, e.id);
            else if (e.nodeName == 'INPUT' || e.nodeName == 'SELECT') {/*ignore*/}
          });
          
          // change events
          document.addEventListener("change", function (event) {
            const e = event.target;
            const value = e.value.trim();
            const et = event.target.type;
            // input fields of given class 
            if (e.nodeName == 'INPUT') {  
              if (e.type === 'checkbox') processStatus(ID, e.id, e.checked ? 1 : 0);
              else if (et === 'button' || et === 'file') processStatus(ID, e.id, 1);
              else if (et === 'radio') { if (e.checked) processStatus(ID, e.name, value); } 
              else if (et === 'range') processStatus(ID, e.id, e.parentElement.children.rangeVal.innerHTML); 
              else if (e.hasAttribute('id')) processStatus(ID, e.id, value);
            }
            else if (e.tagName == 'SELECT') processStatus(ID, e.id, value);
          });
          
          // input events
          document.addEventListener("input", function (event) {
            if (event.target.type === 'range') rangeSlider(event.target);
          });
          
          // user command entered on Log tab
          document.addEventListener("keydown", function (event) {
            if (event.target.id == 'txtCmd') {
              let keyPress = event.keyCode || event.which;
              if (keyPress == 13) sendWsCmd();
            }
          });
          
          // recalc range marker positions 
          window.addEventListener('resize', function (event) {
            $$('input[type=range]').forEach(el => { rangeSlider(el); });
          });
          
          // close web socket on leaving page
          window.addEventListener('beforeunload', function (event) {
            if (ws) closeWS();
          });   
          
        }
        
        function sendWsCmd() {
          // send user command to websocket server
          let txt = $('#txtCmd');
          let line = txt.value;
          if (line != "" && ws !== undefined) {
            sendCmd(line);
            txt.value = "";
            txt.focus();
          } else showLog("No command or no connection");
        }
        
        function sendCmd(reqStr) {
          ws.send(reqStr);
          showLog("Cmd: " + reqStr);
        }
        
        function showLog(reqStr, fromUser = true) {
          if (loggingOn) {
            let date = new Date();
            // add timestamp to received text if generated by browser
            let logText = fromUser ? "[" + date.toLocaleTimeString() + " Web] " : "";
            logText += reqStr;
            // append to log display 
            let log = $('#applog');
            log.innerHTML += colorise(logText) + '<br>';
            // auto scroll new entry unless scroll bar is not at bottom
            const bottom = 2 * baseFontSize;// 2 lines
            const pos = Math.abs(log.scrollHeight - log.clientHeight - log.scrollTop);
            if (pos < bottom) log.scrollTop = log.scrollHeight;
          }
        }

        function colorise(line) {
          // color message according to its type
          let colorVar = "";
          if (line.includes("WARN")) colorVar = "warnColor";
          if (line.includes("ERROR")) colorVar = "errColor";
          if (line.includes("DEBUG")) colorVar = "dbgColor";
          if (line.includes("CHECK")) colorVar = "chkColor";
          if (colorVar.length > 0) {
            const color = root.getPropertyValue('--' + colorVar);
            return "<b><font color=" + color + ">" + line + "</font></b>";
          } else return line;
        }
        
        function sendWsUpdates(doAction) {    
          // get each required update element and obtain id/name and value into array to send as json 
          let jarray = {};
          jarray["action"] = doAction;
          $$('.update-action').forEach(el => {
            if (el.nodeName == "INPUT") jarray[el.getAttribute('id')] = el.value.trim();
          });
          sendCmd('U' + JSON.stringify(jarray));
        }
        
        async function sendControl(key, value) {
          // send only  
          if (value != null) {
            const response = await fetch(encodeURI(webServer + "/control?" + key + "=" + value));
            if (!response.ok) console.log(response.status);
          }
        }
        
        async function sendControlResp(key, value) {
          // send and apply response
          const response = await fetch(encodeURI(webServer + "/control?" + key + "=" + value));
          if (response.ok) {
            updateData = await response.json();
            updateStatus();
          } else console.log(response.status); 
        }
        
        /*********** config functions ***********/
        
        async function getConfig(cfgGroup) {
          // request config json for selected group
          const response = await fetch('/status?123456789' + cfgGroup);
          if (response.ok) {
            const configData = await response.json();
            // format received json into html table
            buildTable(configData, cfgGroup);
          } else console.log(response.status); 
        }
        
        function buildTable(configData, cfgGroup) {
          // dynamically build table of editable settings
          const divShowData = $('.config-group');
          divShowData.innerHTML = "";
          if (cfgGroupNow != cfgGroup) {
            cfgGroupNow = cfgGroup;
            const table = document.createElement("table"); 
            // Create table header row from heading names
            const colHeaders = ['Setting Name', 'Setting Value']; 
            let tr = table.insertRow(-1); 
            for (let i = 0; i < colHeaders.length; i++) {
              let th = document.createElement("th");    
              th.innerHTML = colHeaders[i];
              tr.appendChild(th);
            }

            // add each setting as a row containing setting label and setting value
            let nextPair = 3;
            let saveKey, saveVal;
            Object.entries(configData).forEach(([key, value]) => {
              if (key != "cfgGroup") { // skip over this entry 
                if (nextPair == 3) {
                  // new row
                  tr = table.insertRow(-1);
                  nextPair = 0;
                }
                if (nextPair == 0) {
                  // save key and value
                  saveKey = key;
                  saveVal = value;
                  nextPair = 1;
                } else if (nextPair == 1) {
                  // insert label for setting
                  tr.insertCell(-1).innerHTML = value; 
                  nextPair = 2;
                } else {
                  // get input field type and build html
                  let inputHtml;
                  let valCntr = 0;
                  switch (value.charAt(0)) {
                    case 'T':
                      inputHtml = '<input type="text" class="configItem" id="' + saveKey + '" value="'+ saveVal +'" >';
                    break;
                    case 'N':
                      inputHtml = '<input type="number" class="configItem" id="' + saveKey + '" value="'+ saveVal +'" >';
                    break;
                    case 'S': 
                      // build drop down select
                      valCntr = 0;
                      inputHtml = '<select id="' + saveKey + '" class="selectField">';
                      value.substring(2).split(":").forEach(opt => {
                        inputHtml += '<option value="' + valCntr + '" ' + (saveVal == valCntr ? 'selected="selected"' : '') + '>' + opt + '</option>';
                        valCntr++;
                      });
                      inputHtml += '</select>';
                    break;
                    case 'C':
                      // format checkbox as slider
                      inputHtml = '<div class="switch"><input type="checkbox" class="configItem" id="' + saveKey;
                      inputHtml += '" value="'+ saveVal +'"' + (saveVal == 1 ? ' checked' : '') + '>';
                      inputHtml += '<label class="slider" for="' + saveKey + '"></label></div>';
                    break;
                    case 'D': // display only
                      inputHtml = '<input type="text" class="configItem" id="' + saveKey + '" value="'+ saveVal +'" readonly>';
                    break;
                    case 'R': // R:min:max:step
                      // format number as range slider 
                      const range = value.substring(2).split(":");
                      inputHtml = '<div class="input-group">';
                      inputHtml += '<input type="range" class="configItem" id="' + saveKey + '" min="' + range[0] + '" max="' + range[1];
                      inputHtml += '" step="' + range[2] + '" value="' + saveVal + '"><div name="rangeVal">' + saveVal + '</div></div>';
                    break;
                    case 'B': // B:lab1:lab2:etc
                      // radio button group
                      valCntr = 0;
                      inputHtml = '';
                      value.substring(2).split(":").forEach(opt => {
                        inputHtml += opt + '<input type="radio" class="configItem" name="' + saveKey + '" value="' + valCntr +
                          (saveVal == valCntr ? '" checked>' : '">');
                        valCntr++;
                      });
                    break;
                    default:
                      console.log("Unhandled config input type " + value);
                    break;
                  }
                  tr.insertCell(-1).innerHTML = inputHtml;
                  nextPair = 3;
                }
              }
            })
            // add the newly created table at placeholder
            divShowData.appendChild(table);
          } else cfgGroupNow = -1;
        }

        /*********** OTA functions ***********/
         
        async function otaUploadFile() {
          // notify server to start ota task
          const response = await fetch('/control?startOTA=1');
          if (response.ok) {
            // submit file for uploading
            let file = $("#otafile").files[0];
            let formdata = new FormData();
            formdata.append("otafile", file);
            let ajax = new XMLHttpRequest();
            ajax.upload.addEventListener("progress", progressHandler, false);
            ajax.addEventListener("load", completeHandler, false);
            ajax.addEventListener("error", errorHandler, false);
            ajax.addEventListener("abort", abortHandler, false);
            ajax.open("POST", otaServer +  '/upload');
            ajax.send(formdata);
          } else console.log(response.status); 
        }

        function progressHandler(event) {
          $("#loaded_n_total").innerHTML = "Uploaded " + event.loaded + " of " + event.total + " bytes";
          let percent = (event.loaded / event.total) * 100;
          $("#progressOta").value = Math.round(percent);
          $("#status").innerHTML = Math.round(percent) + "% transferred";
          if (event.loaded  == event.total) $("#status").innerHTML = 'Uploaded, wait for completion result';
        }

        function completeHandler(event) {
          $("#status").innerHTML = event.target.responseText;
          $("#progressOta").value = 0;
        }

        function errorHandler(event) {
          $("#status").innerHTML = "Upload Failed";
          $("#progressOta").value = 0;
        }

        function abortHandler(event) {
          $("#status").innerHTML = "Upload Aborted";
          $("#progressOta").value = 0;
        }
        
        /************* App specific ***************/
        
        async function processStatus(dest, key, value, fromUser = true) {
          // process change to status value
          if (dest == ID) {
            // operation based on ID
            if (key == "wifi") getConfig("0");
            else if (key == "hostName") document.title = value;
            else if (key == "otafile") otaUploadFile();
            else if (key == "alertMsg") showAlert(value);
            else if (key == "clearWSlog") $('#applog').innerHTML = "";
            else if (key == "wsMode") value == 1 ? initWebSocket() : closeWS();
            else if (key == "refreshVal") refreshInterval = value * 1000; 
            else if (key == "clockUTC") checkTime(value);
            else if (key == "camModel") customButtons(key, value);
            else if (key == "peripherals") getConfig("0123");
            else if (key == "motion") getConfig("01");
            else if (key == "other") getConfig("012");
            else if (key == "clearSDlog") clearSDlog();
            else if (key == "refreshSDlog") getSDlog();
            else if (key == "delete" || key == "uploadMove" || key == "upload") sdFile(key, value);
            else if (key == 'timezoneSel') fromUser = setTz(value);
            else if (key == "framesize") fromUser = setFrameSize(key, value, fromUser);
            else if (key == "get-still") getStill();
            else if (key == "download") $("#download").value.includes('.') ? window.location.href='/control?download=1' : null;
            else if (key == "sfile") fromUser = selectFileOrFolder(value, fromUser);
            else if (key == "aec") value ? hide($('#aec_value-group')) : showAec();
            else if (key == "awb_gain") value ? show($('#wb_mode-group')) : hide($('#wb_mode-group')); 
            else if (key == "agc") setAgc(key, value);
            else if (key == "forceRecord") value = recordAction(key);
            else if (key == "showRecord") setRecIndicator(value);
            else if (key == "forcePlayback") fromUser ? playbackAction(key) : deactivatePlaybackButton();
            else if (key == "forceStream") streamAction(key);
            else if (key == 'save') await sleep(600); // allow last input to debounce
            if (fromUser && !$('#'+key).classList.contains("local")) debounceSendControl(key, value); 
          } 
          else if (dest == CLASS) {
            // operations based on class
            if (key.substring(0, 9) == "quick-nav") navigation(value); 
            else if (key == "streamSize") {
              if (value == "saveImage") saveImage();
              else sizeView(value); 
            }
            else if (key == "pin-menu") pinMenu(); 
          }
        }

        /************** menu functions ****************/
           
        function customButtons(key, value) {
          // update camera button text
          if (firstCall) {
            cameraModel = value;
            $('.camTab').innerHTML = cameraModel;
            // customise camera parameters according to camera model
            if (cameraModel == "OV2640") {
              // change button labels
              $('#aec2_lab').innerHTML = "AEC DSP";
              $('#awbg_lab').innerHTML = "AWB Gain";
              $('#dcw_lab').innerHTML = "DCW (Downsize)";
              // change range slider parameters
              changeRange('brightness', "-2", "2", "0");
              changeRange('contrast', "-2", "2", "0");
              changeRange('saturation', "-2", "2", "0");
              changeRange('ae_level', "-2", "2", "0");
              changeRange('gainceiling', "0", "6", "0");
              changeRange('aec_value', "0", "1200", "204");
              changeRange('agc_gain', "0", "30", "5", true);
              $('#gainceiling').parentElement.children.rangeMin.innerHTML = '2x';
              $('#gainceiling').parentElement.children.rangeMax.innerHTML = '128x';
              
            } else if (cameraModel == "OV3660" || cameraModel == "OV5640") {
              // change button labels
              $('#aec2_lab').innerHTML = "Night Mode";
              $('#awbg_lab').innerHTML = "Manual AWB";
              $('#dcw_lab').innerHTML = "Advanced AWB";
              // change range slider parameters
              changeRange('brightness', "-3", "3", "0");
              changeRange('contrast', "-3", "3", "0");
              changeRange('saturation', "-4", "4", "0");
              changeRange('sharpness', "-3", "3", "0");
              changeRange('ae_level', "-5", "5", "0");
              changeRange('gainceiling', "0", "511", "0");
              changeRange('agc_gain', "0", "63", "5", true);
              // show additional options
              $$('div.OV3660, div.OV5640').forEach(el => {show(el)});
              $$('#framesize option').forEach(el => {
                if (el.classList.contains(cameraModel)) show(el);
              });
              let avMax = (cameraModel == "OV3660") ? "1536": "1920"; 
              changeRange('aec_value', "0", avMax, "320");
            } else alert("Unhandled camera model: " + cameraModel);
          }
          firstCall = false;
        }
        
        function changeRange(id, min, max, val, isX = false) {
          // set parameters for range slider
          const range = $('#'+id);
          range.min = min;
          range.max = max;
          range.value = val;
          range.parentElement.children.rangeMin.innerHTML = isX ? (parseInt(min)+1)+'x' : min;
          range.parentElement.children.rangeMax.innerHTML = isX ? (parseInt(max)+1)+'x' : max;
        }
           
        function navigation(key) { 
          const i = $('#'+key); // the clicked icon
          const m = $('#'+i.getAttribute('name')); // the associated menu 

          // toggle selected icon as active, others inactive
          i.classList.toggle('active');
          $$('nav.quick-nav:not(#'+i.id+')').forEach(el => {el.classList.remove('active')});   
          
          // toggle menu attached to icon as active, others inactive
          m.classList.toggle('active');
          $$('nav.panel:not(#'+m.id+')').forEach(el => {el.classList.remove('active')});   
          m.querySelector('.menu-action').checked = isActive(i); // open if icon toggled active, close if not
          
          if (isActive(i)) {
            $('#menu-selector').classList.remove('menu-closed');
            $('#menu-selector').classList.add('menu-open');
          } else {
            $('#menu-selector').classList.add('menu-closed');
            $('#menu-selector').classList.remove('menu-open');
          }
        }

        function pinMenu() {
          // toggle menu pinned status
          if ($('#menu-container').classList.contains('menu-pinned')) {
            $$('.menu-pinned').forEach(el => {
              el.classList.remove('menu-pinned');
              el.classList.add('menu-floating');
            });
          } else {
            $$('.menu-floating').forEach(el => {
              el.classList.remove('menu-floating');
              el.classList.add('menu-pinned');
            });
          }
        }

        /************** stream functions ****************/
        
        const view = $('#stream')
        const viewContainer = $('#stream-container')
        const recordButton = $('#forceRecord')
        const recordingIndicator = $('#recording-indicator')
        const streamButton = $('#forceStream')
        const playbackButton = $('#forcePlayback') 

        function getStill() {
          stopAll();
          view.src = streamServer + "/stream?random="+Date.now(); 
          showView(false);
        }
       
        function recordAction(key) {
          if (isActive($('#'+key))) deactivateRecordButton();
          else activateRecordButton();
          return isActive($('#'+key)) ? 1 : 0;
        }
                
        function playbackAction(key) {
          if (isActive($('#'+key))) deactivatePlaybackButton();
          else activatePlaybackButton();
        }      

        function streamAction(key) {
          if (isActive($('#'+key))) deactivateStreamButton();
          else activateStreamButton();
        } 
        
        async function checkStream() {
          // check when stream ends to close it
          let running = true;
          while (running) {
            try { await view.decode(); }
            catch { running = false; }
          }
          await new Promise((resolve) => setTimeout(resolve, 500));
          stopAll();
        }
        
        function activatePlaybackButton() {
          stopAll();
          playbackButton.classList.add("active");
          playbackButton.innerHTML = "â–¢&nbsp;Stop Playback";
          playbackButton.classList.add("blinking");
          view.src = streamServer + '/stream?source=file'; 
          checkStream();
          showView(true);
        }
         
        function deactivatePlaybackButton() {
          playbackButton.classList.remove("active");
          sendControl("stopStream", "1");
          playbackButton.innerHTML = "âž¤&nbsp;Start Playback";
          playbackButton.classList.remove("blinking");
          disable(playbackButton);
          hide(viewContainer);
        }

        function activateRecordButton() {
          stopAll();
          recordButton.classList.add("active");
          recordButton.innerHTML = "â–¢&nbsp;Stop Recording";
          show(recordingIndicator);
          recordingIndicator.classList.add("blinking");
        }
        
        function deactivateRecordButton() {
          recordButton.classList.remove("active");
          recordButton.innerHTML = "âž¤&nbsp;Start Recording";
          recordingIndicator.classList.remove("blinking");
          hide(recordingIndicator);
        }

        function activateStreamButton() {
          stopAll();
          streamButton.classList.add("active");
          view.src = streamServer + '/stream?source=sensor'; 
          streamButton.innerHTML = "â–¢&nbsp;Stop Stream";
          streamButton.classList.add('blinking');
          showView(false);
        }
        
        function deactivateStreamButton() {
          streamButton.classList.remove("active");
          sendControl("stopStream", "1");
          streamButton.innerHTML ="âž¤&nbsp;Start Stream";
          streamButton.classList.remove('blinking');
          hide(viewContainer);
        }
        
        function setRecIndicator(value) {
          // indicate if motion capture is being recorded
          if (value && recordingIndicator.classList.contains("hidden")) {
            show(recordingIndicator);
            recordingIndicator.classList.add("blinking");
          } 
          else if (!value && !recordingIndicator.classList.contains("hidden")) {
            recordingIndicator.classList.remove("blinking");
            hide(recordingIndicator);
          }
        }
        
        function stopAll() {
          window.stop();
          if (isActive(recordButton)) deactivateRecordButton();
          if (isActive(playbackButton)) deactivatePlaybackButton();
          if (isActive(streamButton)) deactivateStreamButton();
          hide(viewContainer);
        }

        function showView(isFile) {
          // set size values for given framesize
          let sizeStr = '800x600';
          if (isFile) {
            // get framesize from filename  
            sizeStr = $('#sfile').value.split('_')[2]; // the frame type eg SVGA
            $$('#framesize option').forEach(el => { 
              if (el.innerHTML.substr(0, sizeStr.length) == sizeStr) sizeStr = el.innerHTML; // now contains eg SVGA(800x600)
            });
          } else sizeStr = $('#framesize option:checked').innerHTML; // get framesize from selected framesize
             
          // determine actual image size using framesize pixels
          const fwidth =  parseInt(sizeStr.split('x')[0].match(/\d+/));
          const fheight = parseInt(sizeStr.split('x')[1].match(/\d+/));
          imgSize = {width: fwidth, height: fheight};
          sizeView('maxFit'); // initial view size
        }
          
        function calculateAspectRatioFit(srcWidth, srcHeight, maxWidth, maxHeight) {
          const ratio = Math.min(maxWidth / srcWidth, maxHeight / srcHeight);
          return { width: Math.round(srcWidth*ratio), height: Math.round(srcHeight*ratio) };
        }
        
        function sizeView(selectedSize) {  
          // stream icons to set size of screen
          // - max size to fit browser window for aspect ratio
          // # actual frame size
          // Â¤ fullscreen with correct aspect ratio (lose some)
          // â–­ fullscreen (aspect ratio changed)
          // x close screen
          // v download still image 
          
          if (selectedSize == 'closeStream') stopAll();
          else {
            if (selectedSize == 'maxFit') {
              fitSize = calculateAspectRatioFit(imgSize.width, imgSize.height, 
              window.screen.availWidth - $('#menu-container').offsetWidth - 25, 
              window.innerHeight - $('.tab').offsetHeight - $('#footer').offsetHeight - 25);
              viewContainer.style.cssText = 'width:'+fitSize.width+'px; height:'+fitSize.height+'px';
            }
            else if (selectedSize == 'actualSize') {
              viewContainer.style.cssText = 'width:'+imgSize.width+'px; height:'+imgSize.height+'px';
            }
            else if (selectedSize == 'fullAspect') {
              if (viewContainer.requestFullscreen) viewContainer.requestFullscreen();
              else viewContainer.webkitRequestFullscreen();
              const r = calculateAspectRatioFit(imgSize.width, imgSize.height, window.screen.availWidth, window.screen.availHeight)
              viewContainer.style.cssText = 'width:'+r.width+'px; height:'+r.height+'px';
              view.style.cssText = "width: 100%; height:auto";
            }
            else if (selectedSize == 'fullSize') {
              if (viewContainer.requestFullscreen) viewContainer.requestFullscreen();
              else viewContainer.webkitRequestFullscreen();
              viewContainer.style.cssText = 'width:'+window.screen.availWidth+'px; height:'+window.screen.availHeight+'px';
              view.style.cssText = "width: 100%; height: 100%";
            }
            if ((selectedSize == 'actualSize' || selectedSize == 'maxFit') && document.fullscreenElement !== null) {
              if (document.exitFullscreen) document.exitFullscreen();
              else document.webkitExitFullscreen(); /* Safari */
            }
            
            // locate size buttons on screen
            let buttonPos = baseFontSize / 4;
            $$('.streamSize').forEach(el => {
              if (el.id != selectedSize) {
                el.style.right = buttonPos + 'px'; 
                buttonPos += baseFontSize * 1.25;
                show(el);
              } else hide(el);
            });
            show(viewContainer); 
          }
        }
        
        function saveImage() {
          const canvas = document.createElement("canvas");
          canvas.width = imgSize.width;
          canvas.height = imgSize.height;
          document.body.appendChild(canvas);
          canvas.getContext('2d').drawImage(view,0,0);
          let anchor = document.createElement("a");
          anchor.download = $('#clock').innerHTML+".jpg";
          anchor.href = canvas.toDataURL("image/jpeg");
          anchor.click();
          anchor.remove();
          canvas.parentNode.removeChild(canvas);
        }

        /************* user selection functions ************/

        function selectFileOrFolder(filePath, fromUser) {
          // build folder / file option list from json
          let pathDir = "";
          if (filePath != '/~reset') {
            $('#download').value = filePath; //Store file path for download
            $('#delete').value = filePath; //Store file path for delete
            $('#upload').value = filePath; //Store file path for ftp upload
            $('#uploadMove').value = filePath; //Store file path for ftp upload move
            pathDir = filePath.substring(0,filePath.lastIndexOf("/"));
          }
          if (pathDir == "") $$('#sfile option:not(:first-child)').forEach(el => { el.remove()}); 
          if (filePath.substr(-4) === '.avi' && !isActive(playbackButton)) enable(playbackButton);
          if (fromUser) getFiles(filePath);
          return false;
        }
        
        async function getFiles(filePath) {
          // get list of files / folders
          $$('*').forEach(el => { el.style.cursor = ("wait")});
          const response = await fetch(encodeURI(webServer + '/control?sfile='+filePath));
          if (response.ok) {
            const fileData = await response.json();
            Object.entries(fileData).forEach(([key, value]) => {
              if (!value.includes("System") && !value.includes("FOUND")) {
                let option = document.createElement("option");
                option.text = value;
                option.value = key;
                $('#sfile').add(option);
              }
            });
          } else console.log(response.status);
          await new Promise((resolve) => setTimeout(resolve, 500));
          $$('*').forEach(el => { el.style.cursor = ("default")});
        }
        
        function setFrameSize(key, value, fromUser) {
          if (fromUser) {
            sendControl(key, value);
            sendControlResp("updateFPS", value); // needs to be after above
          }
          return false;
        }
        
        function setAgc(key, value) {
          if (value) {
            show($('#gainceiling-group'));
            hide($('#agc_gain-group'));
            rangeSlider($('#gainceiling'));
          } else {
            hide($('#gainceiling-group'));
            show($('#agc_gain-group'));
            rangeSlider($('#agc_gain'));
          }
        }
        
        function showAec() {
          show($('#aec_value-group'));
          rangeSlider($('#aec_value'));
        }

        function checkTime(value) {
          let now = new Date();
          let nowUTC = Math.floor(now.getTime() / 1000);
          let timeDiff = Math.abs(nowUTC - value);  
          if (timeDiff > 5) sendControl("clockUTC", nowUTC); // 5 secs 
        }
        
        function setTz(value) {
          $('#timezone').value = value;
          sendControl('timezone', value);
          return false;
        }
        
        function clearSDlog() {
          if (window.confirm('This will delete all log entries on SD. Are you sure ?')) { 
            $('#sdlog').innerHTML = "";
            sendControl("resetLog", "1");
          }
        }
        
        async function getSDlog() {
          // request SD log file
          const response = await fetch('/web?log.txt');
          if (response.ok) {
            const logData = await response.text();
            let start = 0;
            let log = $('#sdlog');
            
            const loadNextLine = () => {
              const index = logData.indexOf("\n", start);
              if (index !== -1) {
                log.innerHTML += colorise(logData.substring(start, index)) + '<br>';
                start = index + 1;
                // auto scroll log as loaded
                const bottom = 2 * baseFontSize;// 2 lines
                const pos = Math.abs(log.scrollHeight - log.clientHeight - log.scrollTop);
                if (pos < bottom) log.scrollTop = log.scrollHeight;
                // stop browser hanging while log is loaded
                setTimeout(loadNextLine, 1); 
              } 
            };
            loadNextLine(); 
          } else console.log(response.status); 
        }
        
        function sdFile(key, value) {
          if (key == "delete") {
            if (!confirm("Are you sure you want to delete " + value + " from the SD card?")) return false;
          }
          sendControl(key, value);
          if (key == "delete" || key == "uploadMove") selectFileOrFolder("/~reset", true);
        }

      });
    </script>    
  </body>
</html>